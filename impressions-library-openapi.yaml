openapi: 3.0.3
info:
  title: L3 Miage projet BD
  description: |
    Every contract of our print app
  version: 1.0.0
servers:
  - url: "http://localhost:8080"
paths:
  /api/clients/{clientId}/images/{imageId}/photos:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
      - name: imageId
        description: Image's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Find all photo derived from an image
      operationId: find-all-photo-image-client
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Photo"
        400:
          description: Image does not belong to this client
        404:
          description: Client or image id was not found
    post:
      summary: Create a new photo for a client based on an image
      operationId: new-photo-image-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewPhoto"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        400:
          description: In case of calendrier objet type in HTTP request could not be validated
        404:
          description: Client or image id was not found

  /api/clients/{clientId}/impressions/calendriers:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Find all calendriers of a client
      operationId: find-all-calendriers-client
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Calendrier"
        400:
          description: Illegal argument in request
        404:
          description: Client id was not found
    post:
      summary: Create a new impression of a calendrier for the client identified by the id in the path
      operationId: new-calendrier-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewCalendrier"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Calendrier"
        400:
          description: In case of calendrier objet type in HTTP request could not be validated
        404:
          description: Client id was not found
    put:
      summary: Update a calendrier (pas implémenté car pas utile dans le cahier des charges)
      operationId: update-calendrier-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Calendrier"
      responses:
        200:
          description: Updated
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Calendrier"
        400:
          description: Numero of page was not between 1 and 12 or the image of the photo does not belong to this client or exist
        404:
          description: Calendrier or client id was not found

  /api/clients/{clientId}/impressions/calendriers/{calId}/pages:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
      - name: calId
        description: Calendrier's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    post:
      summary: Create a new photo or update a calendrier
      operationId: new-photo-page-calendrier-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Page"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Calendrier"
        400:
          description: Numero of page was not between 1 and 12 or the image of the photo does not belong to this client or exist
        404:
          description: Client or calendrier or photo id could not be found

  /api/client/{clientId}/impressions/albums:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Find all albums
      operationId: find-all-albums-client
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
        404:
          description: Client id was not found
    post:
      summary: Create a new impression of an Album for the client identified by the id in the path
      operationId: new-album-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewAlbum"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: In case of album objet type in HTTP request could not be validated
        404:
          description: Client id was not found
    put:
      summary: Update an album (pas implémenté car pas dans le cahier des charges)
      operationId: update-album-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Album"
      responses:
        200:
          description: Updated
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: In case client id could not be validated
        404:
          description: album id could not be found

  /api/clients/{clientId}/impressions/albums/{albId}/pages:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
      - name: albId
        description: Album's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    post:
      summary: Create a new album page
      operationId: new-album-page-clients
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewPage"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: Calendrier does not belong to the client id or photo in the new page does not exist
        404:
          description: Client or album id could not be found

  /api/clients/{clientId}/impressions/albums/{albId}/pages/{numero}:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
      - name: albId
        description: Album's id
        in: path
        required: true
        schema:
          type: number
          format: int64
      - name: numero
        description: numero de page de l'album
        in: path
        required: true
        schema:
          type: number
          format: int64
    post:
      summary: Create a new photo in the page of the album
      operationId: new-photo-page-album-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: In case the numero is invalid or error when trying to add the photo
        404:
          description: Client or album or photo id could not be found

  /api/client/{clientId}/impressions/tirages:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Find all tirages
      operationId: find-all-tirages
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tirage"
        404:
          description: Client id was not found
    post:
      summary: Create a new impression of a Tirage for the client identified by the id in the path
      operationId: new-tirage-clients
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewTirage"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Tirage"
        400:
          description: In case of Tirage objet type in HTTP request could not be validated
        404:
          description: Client id was not found
    put:
      summary: Update a tirage (pas implémenté car pas dans le cahier des charges)
      operationId: update-tirage-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Tirage"
      responses:
        200:
          description: Updated
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Tirage"
        400:
          description: error request HTTP
        404:
          description: Client could not be found


  /api/client/{clientId}/impressions/tirages/{tirId}/selections:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
      - name: tirId
        description: tirage's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    post:
      summary: Create a new selection tirage
      operationId: new-selection-tirage-clients
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/SelectionTirage"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Tirage"
        400:
          description: Tirage does not belong to the client or error HTTP request
        404:
          description: Client or tirage or photo id could not be found

  /api/client/{clientId}/impressions/cadres:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Find all cadres
      operationId: find-all-cadres
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cadre"
        404:
          description: Client id was not found
    post:
      summary: Create a new impression of a Cadre for the client identified by the id in the path
      operationId: new-cadre-clients
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewCadre"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Cadre"
        400:
          description: In case of Cadre objet type in HTTP request could not be validated
        404:
          description: Client id was not found
    put:
      summary: Update a cadre (pas implémenté car pas dans le cahier des charges)
      operationId: update-cadre-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Cadre"
      responses:
        200:
          description: Updated
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Cadre"
        400:
          description: error HTTP request
        404:
          description: if client id could not be found

  /api/client/{clientId}/impressions/cadres/{cadrId}/photos:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
      - name: cadrId
        description: Cadre's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    post:
      summary: Create a new photo for a cadre
      operationId: new-cadre-photo-clients
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        201:
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Cadre"
        400:
          description: error HTTP request or propriétaire of the photo or cadre is not the client
        404:
          description: if client or cadre or photo id could not be found

  /api/clients/{clientId}/commandes:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Find all Commandes
      operationId: find-all-commandes
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Commande"
        404:
          description: Client id was not found

  /api/clients/{clientId}:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Find client informations
      operationId: find-client-informations
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Client"
        404:
          description: Client id was not found

  /api/clients/{clientId}/images:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Find all client images
      operationId: find-all-client-images
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        404:
          description: Client id was not found


  /api/clients/{clientId}/images/{imageId}:
    parameters:
      - name: clientId
        description: Client's id
        in: path
        required: true
        schema:
          type: number
          format: int64
      - name: imageId
        description: Image's id
        in: path
        required: true
        schema:
          type: number
          format: int64
    delete:
      summary: Delete an image
      operationId: delete-image
      responses:
        204:
          description: Deleted
        400:
          description: An impression is using a photo from this image
        404:
          description: The image was not found

components:
  schemas:

    NewCommande:
      description: A commande without id for creation
      type: object
      properties:
        dateDeCommande:
          type: string
          format: date
        prixTotal:
          type: number
          minimum: 0
        articles:
          type: array
          items:
            $ref: "#/components/schemas/Impression"
        statut:
          type: string
          enum: [enattente, encours, termine]
      required:
        - dateDeCommande
        - articles
        - statut
      example:
        dateDeCommande: '2022-07-01'
        prixTotal: 20.0
        articles:
          - id: 2
        statut: encours

    Commande:
      description: A commande without id for creation
      allOf:
        - $ref: "#/components/schemas/NewCommande"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
          example:
            id: 1

    NewClient:
      description: A client without id for creation
      type: object
      properties:
        nom:
          type: string
        prenom:
          type: string
        adresseMail:
          type: string
        adressePostale:
          type: string
        motDePasse:
          type: string
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        impressions:
          type: array
          items:
            $ref: "#/components/schemas/Impression"
        commandes:
          type: array
          items:
            $ref: "#/components/schemas/Commande"
      required:
        - nom
        - prenom
        - adresseMail
        - adressePostale
        - motDePasse
      example:
        nom: Smith
        prenom: Bob
        adresseMail: bob.smith@wanadoo.fr
        adressePostale: 4 avenue lambda
        motDePasse: azerty123
        images:
          - id: 2
        impressions:
          - id: 3
        commandes:
          - id: 4

    Client:
      description: A client with an id for response
      allOf:
        - $ref: "#/components/schemas/NewClient"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
          example:
            id: 1


    NewImage:
      description: An image without id for creation
      properties:
        chemin:
          type: string
        info:
          type: string
        estPartage:
          type: boolean
        proprietaire:
          $ref: "#/components/schemas/Client"
      required:
        - chemin
        - estPartage
        - proprietaire
      default:
        estPartage: false
      example:
        chemin: nomsite.fr/path
        info: une image de type magnifique
        estPartage: false
        proprietaire:
          - id: 2

    Image:
      description: An image with an id for response
      allOf:
        - $ref: "#/components/schemas/NewImage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
          example:
            id: 1


    NewPhoto:
      description: A photo without id for creation (on peut limiter le nombre de caractères des paramètres?)
      type: object
      properties:
        parametres:
          type: string
        imageSource:
          $ref: "#/components/schemas/Image"
      required:
        - imageSource
        - parametres
      example:
        parametres: grand;etoile
        imageSource:
          - id: 2

    Photo:
      description: An existing photo with an id
      allOf:
        - $ref: "#/components/schemas/NewPhoto"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
          example:
            id: 1


    NewPage:
      description: A page without id for creation (for album only)
      type: object
      properties:
        description:
          type: string
        photos:
          type: array
          minItems: 1
          items:
              $ref: "#/components/schemas/Photo"
      required:
        - photos
      example:
        description: Une page pour les gouverner tous
        photos:
          - id: 2

    Page:
      description: An existing page in a calendrier or album with an id
      allOf:
        - $ref: "#/components/schemas/NewPage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            numero:
              type: integer
              format: int64
              minimum: 1
          required:
            - id
            - numero
          example:
            id: 1
            numero: 1


    NewSelectionTirage:
      description: A selection tirage without id for creation
      type: object
      properties:
        quantite:
          type: integer
          format: int64
        photo:
          $ref: "#/components/schemas/Photo"
      required:
        - quantite
        - photo
      example:
        quantite: 3
        photo:
          - id: 2

    SelectionTirage:
      description: A selection tirage with an id for update
      allOf:
        - $ref: "#/components/schemas/NewSelectionTirage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
          example:
            id: 1

    BaseNewImpression:
      description: The 2 elements in common of any new type of impression creation. Pour éviter la redondance dans la ré-écriture
      type: object
      properties:
        format:
          type: string
          enum: [petit, moyen, grand]
        qualite:
          type: string
          enum: [faible, moyenne, bonne]
      required:
        - format
        - qualite
      example:
        format: moyen
        qualite: moyenne

    Impression:
      description: Pour éviter la redondance. Les 4 type d'impressions y font référence. For response only
      allOf:
        - $ref: "#/components/schemas/BaseNewImpression"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            statut:
              type: string
              enum: [enattente, encours, termine]
            prix:
              type: number
              minimum: 0
            format:
              type: string
            qualite:
              type: string
            consommateur:
              $ref: "#/components/schemas/Client"
          required:
            - id
            - statut
            - prix
            - consommateur
          example:
            id: 1
            statut: encours
            prix: 20.0
            format: moyen
            qualite: moyenne
            consommateur:
              - id: 2

    NewCalendrier:
      description: A calendrier with no id for creation
      allOf:
        - $ref: "#/components/schemas/BaseNewImpression"


    Calendrier:
      description: A calendrier with an id. For response
      allOf:
        - $ref: "#/components/schemas/Impression"
        - type: object
          properties:
            pagesDeCalendrier:
              type: array
              minItems: 12
              maxItems: 12
              items:
                $ref: "#/components/schemas/Page"
          required:
            - pagesDeCalendrier
          example:
            pagesDeCalendrier:
              - id: 3
              - id: 4
              - id: 5
              - id: 6
              - id: 7
              - id: 8
              - id: 9
              - id: 10
              - id: 11
              - id: 12
              - id: 13
              - id: 14

    NewAlbum:
      description: An Album with no id (for creation) (NOTE, verifier que le dans le allOf, quand on réecrit l'attribut format, c'est bien celui du schema BaseNewImpression et que ce string ne peut prendre que les valeurs de l'enum)
      allOf:
        - $ref: "#/components/schemas/BaseNewImpression"
        - type: object
          properties:
            titre:
              type: string
          required:
            - titre
          example:
            titre: Mon petit poney

    Album:
      description: An Album with an id for response
      allOf:
        - $ref: "#/components/schemas/Impression"
        - type: object
          properties:
            titre:
              type: string
            photoDeCouverture:
              $ref: "#/components/schemas/Photo"
            pagesDAlbums:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/Page"
          required:
            - titre
            - photoDeCouverture
            - pagesDAlbums
          example:
            titre: Mon petit poney
            photoDeCouverture:
              - id: 3
            pagesDAlbums:
              - id: 4

    NewTirage:
      description: A Tirage with no id (for creation)
      allOf:
        - $ref: "#/components/schemas/BaseNewImpression"

    Tirage:
      description: A Tirage with an id for response
      allOf:
        - $ref: "#/components/schemas/Impression"
        - type: object
          properties:
            selections:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/SelectionTirage"
          required:
            - selections
          example:
            selections:
              - id: 3

    NewCadre:
      description: A Cadre with no id (for creation)
      allOf:
        - $ref: "#/components/schemas/BaseNewImpression"
        - type: object
          properties:
            taille:
              type: string
          required:
            - taille
          example:
            taille: 11X13

    Cadre:
      description: A cadre with an id for response
      allOf:
        - $ref: "#/components/schemas/Impression"
        - type: object
          properties:
            taille:
              type: string
            photographies:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/Photo"
          required:
            - taille
            - photographies
          example:
            taille: 11X13
            photographies:
              - id: 3















